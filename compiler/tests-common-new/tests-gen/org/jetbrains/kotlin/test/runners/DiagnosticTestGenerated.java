/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateWhenTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/diagnostics/tests/when/testTask")
@TestDataPath("$PROJECT_ROOT")
public class DiagnosticTestGenerated extends AbstractDiagnosticTest {
    @Test
    public void testAllFilesPresentInTestTask() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/when/testTask"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll)\\.kts?$"), true);
    }

    @Test
    @TestMetadata("AnyWhen.kt")
    public void testAnyWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/AnyWhen.kt");
    }

    @Test
    @TestMetadata("BooleanWhen.kt")
    public void testBooleanWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/BooleanWhen.kt");
    }

    @Test
    @TestMetadata("ConditionUnion.kt")
    public void testConditionUnion() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/ConditionUnion.kt");
    }

    @Test
    @TestMetadata("ConstantWhen.kt")
    public void testConstantWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/ConstantWhen.kt");
    }

    @Test
    @TestMetadata("EmptyConclusion.kt")
    public void testEmptyConclusion() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/EmptyConclusion.kt");
    }

    @Test
    @TestMetadata("EmptyCondition.kt")
    public void testEmptyCondition() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/EmptyCondition.kt");
    }

    @Test
    @TestMetadata("EmptyRanges.kt")
    public void testEmptyRanges() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/EmptyRanges.kt");
    }

    @Test
    @TestMetadata("EmptyWhen.kt")
    public void testEmptyWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/EmptyWhen.kt");
    }

    @Test
    @TestMetadata("EnumWhen.kt")
    public void testEnumWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/EnumWhen.kt");
    }

    @Test
    @TestMetadata("IfConclusion.kt")
    public void testIfConclusion() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/IfConclusion.kt");
    }

    @Test
    @TestMetadata("IfElseIf.kt")
    public void testIfElseIf() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/IfElseIf.kt");
    }

    @Test
    @TestMetadata("IncorrectBody.kt")
    public void testIncorrectBody() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/IncorrectBody.kt");
    }

    @Test
    @TestMetadata("IncorrectConditionUnion.kt")
    public void testIncorrectConditionUnion() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/IncorrectConditionUnion.kt");
    }

    @Test
    @TestMetadata("MissingElse.kt")
    public void testMissingElse() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/MissingElse.kt");
    }

    @Test
    @TestMetadata("NestedWhen.kt")
    public void testNestedWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/NestedWhen.kt");
    }

    @Test
    @TestMetadata("NoReturnValue.kt")
    public void testNoReturnValue() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/NoReturnValue.kt");
    }

    @Test
    @TestMetadata("NothingWhen.kt")
    public void testNothingWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/NothingWhen.kt");
    }

    @Test
    @TestMetadata("NullForNonNull.kt")
    public void testNullForNonNull() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/NullForNonNull.kt");
    }

    @Test
    @TestMetadata("NullWhen.kt")
    public void testNullWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/NullWhen.kt");
    }

    @Test
    @TestMetadata("ReadWhen.kt")
    public void testReadWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/ReadWhen.kt");
    }

    @Test
    @TestMetadata("ReturnWhen.kt")
    public void testReturnWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/ReturnWhen.kt");
    }

    @Test
    @TestMetadata("SealedWhen.kt")
    public void testSealedWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/SealedWhen.kt");
    }

    @Test
    @TestMetadata("TrueCondition.kt")
    public void testTrueCondition() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/TrueCondition.kt");
    }

    @Test
    @TestMetadata("TypeMismatchConclusion.kt")
    public void testTypeMismatchConclusion() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/TypeMismatchConclusion.kt");
    }

    @Test
    @TestMetadata("UnreachableCondition.kt")
    public void testUnreachableCondition() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/UnreachableCondition.kt");
    }

    @Test
    @TestMetadata("UnreachableRanges.kt")
    public void testUnreachableRanges() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/UnreachableRanges.kt");
    }

    @Test
    @TestMetadata("UnreachableSubclass.kt")
    public void testUnreachableSubclass() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/UnreachableSubclass.kt");
    }

    @Test
    @TestMetadata("UnusedWhen.kt")
    public void testUnusedWhen() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/UnusedWhen.kt");
    }

    @Test
    @TestMetadata("ValConclusion.kt")
    public void testValConclusion() throws Exception {
        runTest("compiler/testData/diagnostics/tests/when/testTask/ValConclusion.kt");
    }
}
